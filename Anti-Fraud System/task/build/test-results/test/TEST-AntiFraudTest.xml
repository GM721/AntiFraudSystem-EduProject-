<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="AntiFraudTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2022-08-30T17:04:48" hostname="DESKTOP-QDF2IJU" time="29.509">
  <properties/>
  <testcase name="start" classname="AntiFraudTest" time="29.509"/>
  <system-out><![CDATA[?[1;31m
Start test 1?[0m

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.1.RELEASE)

2022-08-30 20:04:49.018  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication on DESKTOP-QDF2IJU with PID 10660 (started by Home in C:\Users\Home\Desktop\JEP\Anti-Fraud System\task)
2022-08-30 20:04:49.022  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to default profiles: default
2022-08-30 20:04:50.608  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2022-08-30 20:04:50.728  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 106ms. Found 5 JPA repository interfaces.
2022-08-30 20:04:51.668  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
2022-08-30 20:04:51.682  INFO 10660 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2022-08-30 20:04:51.682  INFO 10660 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2022-08-30 20:04:51.813  INFO 10660 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2022-08-30 20:04:51.813  INFO 10660 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2714 ms
2022-08-30 20:04:52.007  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2022-08-30 20:04:52.536  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2022-08-30 20:04:52.549  INFO 10660 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/afs_db?useUnicode=true&serverTimezone=UTC'
2022-08-30 20:04:52.861  INFO 10660 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2022-08-30 20:04:52.923  INFO 10660 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2022-08-30 20:04:53.033  WARN 10660 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2022-08-30 20:04:53.038  INFO 10660 --- [         task-1] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 5.4.17.Final
2022-08-30 20:04:53.338  INFO 10660 --- [         task-1] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2022-08-30 20:04:53.591  INFO 10660 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
Hibernate: create table card_limit (number varchar(255) not null, allow_limit integer not null, manual_limit integer not null, primary key (number)) engine=InnoDB
Hibernate: create table hibernate_sequence (next_val bigint) engine=InnoDB
Hibernate: insert into hibernate_sequence values ( 1 )
Hibernate: insert into hibernate_sequence values ( 1 )
Hibernate: insert into hibernate_sequence values ( 1 )
Hibernate: insert into hibernate_sequence values ( 1 )
Hibernate: create table stolen_card (id bigint not null, number varchar(255), primary key (id)) engine=InnoDB
Hibernate: create table suspicious_ip (id bigint not null, ip varchar(255), primary key (id)) engine=InnoDB
Hibernate: create table transaction (transaction_id bigint not null, amount bigint, date datetime(6), feedback varchar(255), ip varchar(255), number varchar(255), region varchar(255), result varchar(255), primary key (transaction_id)) engine=InnoDB
Hibernate: create table user (id bigint not null, is_lock bit, name varchar(255) not null, password varchar(255) not null, role varchar(255), username varchar(255) not null, primary key (id)) engine=InnoDB
Hibernate: alter table suspicious_ip drop index UK_trkr3xhdrcxqkplaedhifh0of
Hibernate: alter table suspicious_ip add constraint UK_trkr3xhdrcxqkplaedhifh0of unique (ip)
Hibernate: alter table user drop index UK_sb8bbouer5wak8vyiiy4pf2bx
Hibernate: alter table user add constraint UK_sb8bbouer5wak8vyiiy4pf2bx unique (username)
2022-08-30 20:04:54.854  INFO 10660 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-08-30 20:04:54.865  INFO 10660 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2022-08-30 20:04:55.092  INFO 10660 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
2022-08-30 20:04:55.153  INFO 10660 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2d3b0978, org.springframework.security.web.context.SecurityContextPersistenceFilter@113d0f75, org.springframework.security.web.header.HeaderWriterFilter@6f4adaab, org.springframework.security.web.authentication.logout.LogoutFilter@8aa5ab4, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1fc5c0b2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@773f3360, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5534e6f1, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5c60c08, org.springframework.security.web.session.SessionManagementFilter@6aaa678d, org.springframework.security.web.access.ExceptionTranslationFilter@210d3a42, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1a06602f]
2022-08-30 20:04:55.247  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
2022-08-30 20:04:55.249  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositoriesâ€¦
2022-08-30 20:04:55.832  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2022-08-30 20:04:55.843  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 7.275 seconds (JVM running for 8.237)
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 1",
   "password": "oa3VvqnLxW"
}'
Expectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
-----
2022-08-30 20:04:56.156  INFO 10660 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-08-30 20:04:56.157  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2022-08-30 20:04:56.172  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username is null limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into user (is_lock, name, password, role, username, id) values (?, ?, ?, ?, ?, ?)
2022-08-30 20:04:56.604  WARN 10660 --- [io-28852-exec-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 1048, SQLState: 23000
2022-08-30 20:04:56.604 ERROR 10660 --- [io-28852-exec-1] o.h.engine.jdbc.spi.SqlExceptionHelper   : Column 'username' cannot be null
could not execute statement; SQL [n/a]; constraint [null]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement
?[1;31m
Start test 2?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 2",
   "username": "johndoe1"
}'
Expectations: 'In case of wrong data in request, endpoint must respond with BAD REQUEST  status (400).'
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
rawPassword cannot be null
?[1;31m
Start test 3?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 1",
   "username": "johndoe1",
   "password": "oMoa3VvqnLxW"
}'
Expectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into user (is_lock, name, password, role, username, id) values (?, ?, ?, ?, ?, ?)
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 4?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 5?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 1",
   "username": "johndoe1",
   "password": "oMoa3VvqnLxW"
}'
Expectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into user (is_lock, name, password, role, username, id) values (?, ?, ?, ?, ?, ?)
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 6?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 7?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'A user with incorrect credentials is not allowed'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 8?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'A user with incorrect credentials is not allowed'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 9?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Merchant after registration must be LOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 10?[0m
Test case
Testing api: '/api/auth/access'
Expectations: 'A user johndoe1 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: update user set is_lock=? where username=?
?[1;31m
Start test 11?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: update user set role=? where username=?
?[1;31m
Start test 12?[0m
Test case
Testing api: '/api/antifraud/history'
Expectations: 'User johndoe1 must be unlocked.Endpoint must respond with the HTTP OK status (200) and empty array in case if history is empty.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
?[1;31m
Start test 13?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: update user set role=? where username=?
?[1;31m
Start test 14?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user johndoe1 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: insert into card_limit (allow_limit, manual_limit, number) values (?, ?, ?)
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 15?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 1'
Expectations: 'Result validating of Transaction must be 'ALLOWED''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 16?[0m
2022-08-30 20:04:58.729  INFO 10660 --- [     Thread-339] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2022-08-30 20:04:58.730  INFO 10660 --- [     Thread-339] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2022-08-30 20:04:58.731  INFO 10660 --- [     Thread-339] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2022-08-30 20:04:58.744  INFO 10660 --- [     Thread-339] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.1.RELEASE)

2022-08-30 20:04:58.878  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication on DESKTOP-QDF2IJU with PID 10660 (started by Home in C:\Users\Home\Desktop\JEP\Anti-Fraud System\task)
2022-08-30 20:04:58.879  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to default profiles: default
2022-08-30 20:04:59.513  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2022-08-30 20:04:59.547  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 5 JPA repository interfaces.
2022-08-30 20:04:59.669  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
2022-08-30 20:04:59.670  INFO 10660 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2022-08-30 20:04:59.670  INFO 10660 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2022-08-30 20:04:59.710  INFO 10660 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2022-08-30 20:04:59.710  INFO 10660 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 828 ms
2022-08-30 20:04:59.768  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Starting...
2022-08-30 20:04:59.789  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-2 - Start completed.
2022-08-30 20:04:59.789  INFO 10660 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/afs_db?useUnicode=true&serverTimezone=UTC'
2022-08-30 20:04:59.849  INFO 10660 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2022-08-30 20:04:59.865  INFO 10660 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2022-08-30 20:04:59.875  INFO 10660 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-08-30 20:04:59.923  WARN 10660 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2022-08-30 20:05:00.158  INFO 10660 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-08-30 20:05:00.158  INFO 10660 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2022-08-30 20:05:00.343  INFO 10660 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
2022-08-30 20:05:00.355  INFO 10660 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@22e1a1dc, org.springframework.security.web.context.SecurityContextPersistenceFilter@7be1e187, org.springframework.security.web.header.HeaderWriterFilter@5c552f08, org.springframework.security.web.authentication.logout.LogoutFilter@5fa9971f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@70a24463, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1107c465, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@64df8422, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@14b4d90b, org.springframework.security.web.session.SessionManagementFilter@4fd00e10, org.springframework.security.web.access.ExceptionTranslationFilter@1bd6638, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@19c06762]
2022-08-30 20:05:00.390  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
2022-08-30 20:05:00.391  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositoriesâ€¦
2022-08-30 20:05:00.497  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2022-08-30 20:05:00.503  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.67 seconds (JVM running for 12.898)
?[1;31m
Start test 17?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'After restart user must exist'
-----
2022-08-30 20:05:00.510  INFO 10660 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-08-30 20:05:00.510  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2022-08-30 20:05:00.513  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 18?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 1",
   "username": "johndoe1",
   "password": "oMoa3VvqnLxW"
}'
Expectations: 'In case of an attempt to register an existing user, endpoint must respond with HTTP CONFLICT status (409).'
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
?[1;31m
Start test 19?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 2",
   "username": "johndoe2",
   "password": "oMoa5VvqnLxW"
}'
Expectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into user (is_lock, name, password, role, username, id) values (?, ?, ?, ?, ?, ?)
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 20?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'Endpoint must respond with HTTP OK status (200) and body with array of objects representing the users sorted by ID in ascending order.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 21?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 199'
Expectations: 'Result validating of Transaction must be 'ALLOWED''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
199
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 22?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 200'
Expectations: 'Result validating of Transaction must be 'ALLOWED''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 23?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 201'
Expectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
201
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 24?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 1499'
Expectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1499
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 25?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 1500'
Expectations: 'Result validating of Transaction must be 'MANUAL_PROCESSING''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1500
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 26?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 1501'
Expectations: 'Result validating of Transaction must be 'PROHIBITED''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1501
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 27?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 2000'
Expectations: 'Result validating of Transaction must be 'PROHIBITED''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
2000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 28?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = -1'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEEIncorrect amount of transaction. It must be greater than zero.
?[1;31m
Start test 29?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = 0'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEEIncorrect amount of transaction. It must be greater than zero.
?[1;31m
Start test 30?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = null'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEECannot invoke "java.lang.Long.longValue()" because the return value of "antifraud.DB.Entities.Transaction.getAmount()" is null
?[1;31m
Start test 31?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = ""'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEECannot invoke "java.lang.Long.longValue()" because the return value of "antifraud.DB.Entities.Transaction.getAmount()" is null
?[1;31m
Start test 32?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'amount = " "'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEECannot invoke "java.lang.Long.longValue()" because the return value of "antifraud.DB.Entities.Transaction.getAmount()" is null
?[1;31m
Start test 33?[0m
Test case
Testing api: '/api/antifraud/transaction'
request: 'empty body'
Expectations: 'Response status must be 'Bad request''
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
EEECannot invoke "String.split(String)" because "ip" is null
?[1;31m
Start test 34?[0m
Test case
Testing api: '/api/auth/user'
request: '/api/auth/user/somebody'
Expectations: 'If a user is not found, respond with HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
?[1;31m
Start test 35?[0m
Test case
Testing api: '/api/auth/user'
request: '/api/auth/user/johndoe1'
Expectations: 'The endpoint must delete the user and respond with HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: delete from user where id=?
?[1;31m
Start test 36?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'User 'johndoe1' must be delete'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 37?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a user is not found, endpoint must respond with the HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
?[1;31m
Start test 38?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role is not found, endpoint must respond with the HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
2022-08-30 20:05:02.964  WARN 10660 --- [io-28852-exec-2] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `antifraud.Enums.Roles` from String "USER": not one of the values accepted for Enum class: [MERCHANT, ADMINISTRATOR, SUPPORT]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `antifraud.Enums.Roles` from String "USER": not one of the values accepted for Enum class: [MERCHANT, ADMINISTRATOR, SUPPORT]
 at [Source: (PushbackInputStream); line: 1, column: 31] (through reference chain: antifraud.RequestAndResponse.ChangeRoleRequest["role"])]
?[1;31m
Start test 39?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role is ADMINISTRATOR, endpoint must respond with the HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 40?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role successfully changed, respond with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: update user set role=? where username=?
?[1;31m
Start test 41?[0m
Test case
Testing api: '/api/auth/role'
Expectations: 'If a role already assigned to a user, endpoint must respond with the HTTP Conflict status (409).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 42?[0m
Test case
Testing api: '/api/auth/access'
Expectations: 'A user johndoe2 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: update user set is_lock=? where username=?
?[1;31m
Start test 43?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'Role for user 'johndoe2' must be changed to SUPPORT'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ order by user0_.id asc
?[1;31m
Start test 44?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Role MERCHANT must be removed from user johndoe2!'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 45?[0m
Test case
Testing api: '/api/auth/user'
request: '{
   "name": "John Doe 3",
   "username": "johndoe3",
   "password": "oMoa6VvqnLxW"
}'
Expectations: 'If user successfully added, endpoint must respond with HTTP CREATED status (201) '
-----
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into user (is_lock, name, password, role, username, id) values (?, ?, ?, ?, ?, ?)
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 46?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'MERCHANT user after registration must be LOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 47?[0m
Test case
Testing api: '/api/auth/access'
Expectations: 'A user johndoe3 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: update user set is_lock=? where username=?
?[1;31m
Start test 48?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user johndoe3 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 49?[0m
Test case
Testing api: '/api/auth/access'
Expectations: 'A user johndoe3 must be LOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: update user set is_lock=? where username=?
?[1;31m
Start test 50?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user johndoe3 must be LOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 51?[0m
Test case
Testing api: '/api/auth/access'
Expectations: 'A user johndoe3 must be UNLOCKED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select user0_.id as col_0_0_ from user user0_ where user0_.username=? limit ?
Hibernate: update user set is_lock=? where username=?
?[1;31m
Start test 52?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role ADMINISTRATOR must not have access to /api/antifraud/transaction'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 53?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role SUPPORT must not have access to /api/antifraud/transaction'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 54?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role ANONYMOUS must not have access to /api/antifraud/transaction'
-----
?[1;31m
Start test 55?[0m
Test case
Testing api: '/api/auth/user'
Expectations: 'A user with role ANONYMOUS must not have access to DELETE /api/auth/user'
-----
?[1;31m
Start test 56?[0m
Test case
Testing api: '/api/auth/user'
Expectations: 'A user with role SUPPORT must not have access to DELETE /api/auth/user'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 57?[0m
Test case
Testing api: '/api/auth/user'
Expectations: 'A user with role MERCHANT must not have access to DELETE /api/auth/user'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 58?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'A user with role ANONYMOUS must not have access to /api/auth/list'
-----
?[1;31m
Start test 59?[0m
Test case
Testing api: '/api/auth/list'
Expectations: 'A user with role MERCHANT must not have access to /api/auth/list'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 60?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 61?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 62?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 63?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 64?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 65?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/suspicious-ip'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 66?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 67?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 68?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role ADMINISTRATOR must not have access to POST /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 69?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role MERCHANT must not have access to POST /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 70?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role ADMINISTRATOR must not have access to DELETE /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 71?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A user with role MERCHANT must not have access to DELETE /api/antifraud/stolencard'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 72?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'Endpoint must respond with empty array'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ order by suspicious0_.id asc
?[1;31m
Start test 73?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into suspicious_ip (ip, id) values (?, ?)
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
?[1;31m
Start test 74?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'If IP already in database,  endpoint must respond with the HTTP Conflict status (409).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
?[1;31m
Start test 75?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 76?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 77?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into suspicious_ip (ip, id) values (?, ?)
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
?[1;31m
Start test 78?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'Endpoint must responds with Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ order by suspicious0_.id asc
?[1;31m
Start test 79?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
Hibernate: delete from suspicious_ip where id=?
?[1;31m
Start test 80?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'If IP not found in database, respond with the HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
?[1;31m
Start test 81?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'If IP doesn't have right format, respond with HTTP Bad Request status (400)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 82?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ order by suspicious0_.id asc
?[1;31m
Start test 83?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Endpoint must respond with empty array'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ order by stolencard0_.id asc
?[1;31m
Start test 84?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A card must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into stolen_card (number, id) values (?, ?)
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
?[1;31m
Start test 85?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'If card-number already in database, endpoint must respond with the HTTP Conflict status (409).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
?[1;31m
Start test 86?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 87?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'If checksum of card-number is wrong, endpoint must respond with HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 88?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A card must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into stolen_card (number, id) values (?, ?)
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
?[1;31m
Start test 89?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Endpoint must responds with Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ order by stolencard0_.id asc
?[1;31m
Start test 90?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Card must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
Hibernate: delete from stolen_card where id=?
?[1;31m
Start test 91?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'If card-number not found in database, respond with the HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
?[1;31m
Start test 92?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'If card-number doesn't have right format, endpoint must respond with HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 93?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Card must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ order by stolencard0_.id asc
?[1;31m
Start test 94?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - suspicious ip reason'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 95?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - stolen card reason'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: insert into card_limit (allow_limit, manual_limit, number) values (?, ?, ?)
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 96?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - stolen card, suspicious ip reasons'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 97?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - amount, stolen card, suspicious ip reasons'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
2000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 98?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 99?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 100?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 101?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be MANUAL_PROCESSING due to - ip correlation rule'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 102?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - ip correlation rule'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 103?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A card must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into stolen_card (number, id) values (?, ?)
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
?[1;31m
Start test 104?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into suspicious_ip (ip, id) values (?, ?)
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
?[1;31m
Start test 105?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, ip-correlation reasons'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
2000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 106?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Card must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
Hibernate: delete from stolen_card where id=?
?[1;31m
Start test 107?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
Hibernate: delete from suspicious_ip where id=?
?[1;31m
Start test 108?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 109?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 110?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 111?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be MANUAL_PROCESSING due to - region correlation rule'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 112?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - region correlation rule'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 113?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'A card must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into stolen_card (number, id) values (?, ?)
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
?[1;31m
Start test 114?[0m
Test case
Testing api: '/api/antifraud/suspicious-ip'
Expectations: 'IP must be added to Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into suspicious_ip (ip, id) values (?, ?)
Hibernate: select suspicious0_.id as id1_2_, suspicious0_.ip as ip2_2_ from suspicious_ip suspicious0_ where suspicious0_.ip=?
?[1;31m
Start test 115?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be PROHIBITED due to - amount, card-number, ip, region-correlation reasons'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
2000
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 116?[0m
Test case
Testing api: '/api/antifraud/stolencard'
Expectations: 'Card must be removed from Black List'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select stolencard0_.id as id1_1_, stolencard0_.number as number2_1_ from stolen_card stolencard0_ where stolencard0_.number=?
Hibernate: delete from stolen_card where id=?
?[1;31m
Start test 117?[0m
Test case
Testing api: '/api/antifraud/history/4000004938320896'
Expectations: 'If transactions for specified card number is not found in database, respond with the HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as col_0_0_ from transaction transactio0_ where transactio0_.number=? limit ?
?[1;31m
Start test 118?[0m
Test case
Testing api: '/api/antifraud/history/4000008449433402'
Expectations: 'If card-number doesn't have right format (Luhn algo), respond with HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 119?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
?[1;31m
Start test 120?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
?[1;31m
Start test 121?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If feedback must throw Exception due to table in description section, respond with HTTP Unprocessable Entity status 422.'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
?[1;31m
Start test 122?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If transaction is not found in history, respond with the HTTP Not Found status (404).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
?[1;31m
Start test 123?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role ANONYMOUS must not have access to PUT /api/antifraud/transaction'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
?[1;31m
Start test 124?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role ADMINISTRATOR must not have access to PUT /api/antifraud/transaction'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 125?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'A user with role MERCHANT must not have access to PUT /api/antifraud/transaction'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 126?[0m
Test case
Testing api: '/api/antifraud/history'
Expectations: 'A user with role ANONYMOUS must not have access to GET /api/antifraud/history'
-----
?[1;31m
Start test 127?[0m
Test case
Testing api: '/api/antifraud/history/4000003305160034'
Expectations: 'A user with role ANONYMOUS must not have access to GET /api/antifraud/history'
-----
?[1;31m
Start test 128?[0m
Test case
Testing api: '/api/antifraud/history'
Expectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/history'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 129?[0m
Test case
Testing api: '/api/antifraud/history/4000003305160034'
Expectations: 'A user with role ADMINISTRATOR must not have access to GET /api/antifraud/history'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 130?[0m
Test case
Testing api: '/api/antifraud/history'
Expectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/history'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 131?[0m
Test case
Testing api: '/api/antifraud/history/4000003305160034'
Expectations: 'A user with role MERCHANT must not have access to GET /api/antifraud/history'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
?[1;31m
Start test 132?[0m
Test case
Testing api: '/api/antifraud/history'
Expectations: 'Endpoint must respond with the HTTP OK status (200) and body with array of JSON objects representing transactions, sorted by id in ascending order'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
?[1;31m
Start test 133?[0m
Test case
Testing api: '/api/antifraud/history/4000003305160034'
Expectations: 'If transactions for specified card number is found, respond with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as col_0_0_ from transaction transactio0_ where transactio0_.number=? limit ?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ where transactio0_.number=? order by transactio0_.transaction_id asc
?[1;31m
Start test 134?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
200
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
210
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 135?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 136?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If feedback for specified transaction is already in database, respond with the HTTP Conflict status (409).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
?[1;31m
Start test 137?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'If feedback doesn't have right format (ALLOWED, MANUAL_PROCESSING, PROHIBITED), respond with HTTP Bad Request status (400).'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
2022-08-30 20:05:13.339  WARN 10660 --- [o-28852-exec-10] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.http.converter.HttpMessageNotReadableException: JSON parse error: Cannot deserialize value of type `antifraud.Enums.TransStatus` from String "ALLOWEDD": not one of the values accepted for Enum class: [ALLOWED, MANUAL_PROCESSING, PROHIBITED]; nested exception is com.fasterxml.jackson.databind.exc.InvalidFormatException: Cannot deserialize value of type `antifraud.Enums.TransStatus` from String "ALLOWEDD": not one of the values accepted for Enum class: [ALLOWED, MANUAL_PROCESSING, PROHIBITED]
 at [Source: (PushbackInputStream); line: 1, column: 32] (through reference chain: antifraud.RequestAndResponse.TransactionFeedback["feedback"])]
?[1;31m
Start test 138?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 202, Manual = 1500. Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
202
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
202
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 139?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
202
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1500
203
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 140?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 141?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 202, Manual = 1160. Transaction must be PROHIBITED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
202
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1160
1161
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 142?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
202
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1160
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 143?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 144?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 162, Manual = 1160. Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
162
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1160
163
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 145?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
162
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
1160
1
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 146?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 147?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 130, Manual = 928. Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
130
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
928
131
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 148?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 130, Manual = 928. Transaction must be PROHIBITED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
130
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
928
929
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 149?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 150?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 290, Manual = 929. Transaction must be ALLOWED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
290
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
929
289
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 151?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 290, Manual = 929. Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
290
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
929
929
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 152?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'PROHIBITED'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
290
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
929
930
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 153?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'The limits of transaction validation updated.Endpoint responds with the HTTP OK status (200)'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select transactio0_.transaction_id as transact1_3_, transactio0_.amount as amount2_3_, transactio0_.date as date3_3_, transactio0_.feedback as feedback4_3_, transactio0_.ip as ip5_3_, transactio0_.number as number6_3_, transactio0_.region as region7_3_, transactio0_.result as result8_3_ from transaction transactio0_ order by transactio0_.transaction_id asc
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select transactio0_.transaction_id as transact1_3_0_, transactio0_.amount as amount2_3_0_, transactio0_.date as date3_3_0_, transactio0_.feedback as feedback4_3_0_, transactio0_.ip as ip5_3_0_, transactio0_.number as number6_3_0_, transactio0_.region as region7_3_0_, transactio0_.result as result8_3_0_ from transaction transactio0_ where transactio0_.transaction_id=?
Hibernate: select cardlimit0_.number as number1_0_0_, cardlimit0_.allow_limit as allow_li2_0_0_, cardlimit0_.manual_limit as manual_l3_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: update transaction set amount=?, date=?, feedback=?, ip=?, number=?, region=?, result=? where transaction_id=?
Hibernate: update card_limit set allow_limit=?, manual_limit=? where number=?
?[1;31m
Start test 154?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 290, Manual = 930. Transaction must be MANUAL_PROCESSING'
-----
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
290
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
930
930
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
?[1;31m
Start test 155?[0m

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::        (v2.3.1.RELEASE)

2022-08-30 20:05:16.337  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Starting AntiFraudApplication on DESKTOP-QDF2IJU with PID 10660 (started by Home in C:\Users\Home\Desktop\JEP\Anti-Fraud System\task)
2022-08-30 20:05:16.337  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : No active profile set, falling back to default profiles: default
2022-08-30 20:05:16.762  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFERRED mode.
2022-08-30 20:05:16.787  INFO 10660 --- [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 25ms. Found 5 JPA repository interfaces.
2022-08-30 20:05:16.893  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 28852 (http)
2022-08-30 20:05:16.894  INFO 10660 --- [    Test worker] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2022-08-30 20:05:16.894  INFO 10660 --- [    Test worker] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.36]
2022-08-30 20:05:16.937  INFO 10660 --- [    Test worker] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2022-08-30 20:05:16.937  INFO 10660 --- [    Test worker] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 596 ms
2022-08-30 20:05:16.986  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Starting...
2022-08-30 20:05:17.001  INFO 10660 --- [    Test worker] com.zaxxer.hikari.HikariDataSource       : HikariPool-3 - Start completed.
2022-08-30 20:05:17.001  INFO 10660 --- [    Test worker] o.s.b.a.h2.H2ConsoleAutoConfiguration    : H2 console available at '/h2-console'. Database available at 'jdbc:mysql://localhost:3306/afs_db?useUnicode=true&serverTimezone=UTC'
2022-08-30 20:05:17.055  INFO 10660 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2022-08-30 20:05:17.065  INFO 10660 --- [         task-1] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2022-08-30 20:05:17.077  INFO 10660 --- [         task-1] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2022-08-30 20:05:17.103  WARN 10660 --- [    Test worker] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2022-08-30 20:05:17.291  INFO 10660 --- [         task-1] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2022-08-30 20:05:17.292  INFO 10660 --- [         task-1] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2022-08-30 20:05:17.414  INFO 10660 --- [    Test worker] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 14 endpoint(s) beneath base path '/actuator'
2022-08-30 20:05:17.425  INFO 10660 --- [    Test worker] o.s.s.web.DefaultSecurityFilterChain     : Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3829306d, org.springframework.security.web.context.SecurityContextPersistenceFilter@3e729d46, org.springframework.security.web.header.HeaderWriterFilter@15ae31b, org.springframework.security.web.authentication.logout.LogoutFilter@6de2344a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@577dac16, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2723b0d0, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7137cd14, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@28effa3f, org.springframework.security.web.session.SessionManagementFilter@428e9be2, org.springframework.security.web.access.ExceptionTranslationFilter@54d9b23a, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@600a1270]
2022-08-30 20:05:17.452  INFO 10660 --- [    Test worker] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 28852 (http) with context path ''
2022-08-30 20:05:17.453  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Triggering deferred initialization of Spring Data repositoriesâ€¦
2022-08-30 20:05:17.538  INFO 10660 --- [    Test worker] DeferredRepositoryInitializationListener : Spring Data repositories initialized!
2022-08-30 20:05:17.544  INFO 10660 --- [    Test worker] antifraud.AntiFraudApplication           : Started AntiFraudApplication in 1.24 seconds (JVM running for 29.939)
?[1;31m
Start test 156?[0m
Test case
Testing api: '/api/antifraud/transaction'
Expectations: 'Limits must be updated to: Allow = 290, Manual = 930. Transaction must be PROHIBITED'
-----
2022-08-30 20:05:17.548  INFO 10660 --- [io-28852-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2022-08-30 20:05:17.549  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2022-08-30 20:05:17.552  INFO 10660 --- [io-28852-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 3 ms
Hibernate: select user0_.id as id1_4_, user0_.is_lock as is_lock2_4_, user0_.name as name3_4_, user0_.password as password4_4_, user0_.role as role5_4_, user0_.username as username6_4_ from user user0_ where user0_.username=?
Hibernate: select count(*) as col_0_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
290
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
930
931
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select cardlimit0_.number as number1_0_, cardlimit0_.allow_limit as allow_li2_0_, cardlimit0_.manual_limit as manual_l3_0_ from card_limit cardlimit0_ where cardlimit0_.number=?
Hibernate: select stolencard0_.id as col_0_0_ from stolen_card stolencard0_ where stolencard0_.number=? limit ?
Hibernate: select suspicious0_.id as col_0_0_ from suspicious_ip suspicious0_ where suspicious0_.ip=? limit ?
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.ip FROM Transaction t WHERE timediff(?, t.date) <= time('1:00:00') AND timediff(?, t.date)  >= time('00:00:00') AND t.ip <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: SELECT DISTINCT t.region FROM Transaction t where timediff(?, t.date) <= time("1:00:00") AND timediff(?, t.date)  >= time("00:00:00") AND t.region <> ? AND t.number = ? 
Hibernate: select next_val as id_val from hibernate_sequence for update
Hibernate: update hibernate_sequence set next_val= ? where next_val=?
Hibernate: insert into transaction (amount, date, feedback, ip, number, region, result, transaction_id) values (?, ?, ?, ?, ?, ?, ?, ?)
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
